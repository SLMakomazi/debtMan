{"ast":null,"code":"/**\r\n * Format a number as currency\r\n * @param {number} amount - The amount to format\r\n * @param {string} currency - The currency code (default: 'ZAR')\r\n * @returns {string} Formatted currency string\r\n */\nexport const formatCurrency = (amount, currency = 'ZAR') => {\n  if (amount === null || amount === undefined) return 'N/A';\n  return new Intl.NumberFormat('en-ZA', {\n    style: 'currency',\n    currency: currency,\n    minimumFractionDigits: 2,\n    maximumFractionDigits: 2\n  }).format(amount);\n};\n\n/**\r\n * Format a date string to a more readable format\r\n * @param {string} dateString - The date string to format\r\n * @returns {string} Formatted date string\r\n */\nexport const formatDate = dateString => {\n  if (!dateString) return 'N/A';\n  const date = new Date(dateString);\n  return new Intl.DateTimeFormat('en-ZA', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric',\n    hour: '2-digit',\n    minute: '2-digit'\n  }).format(date);\n};\n\n/**\r\n * Format a number with commas as thousand separators\r\n * @param {number} number - The number to format\r\n * @returns {string} Formatted number string\r\n */\nexport const formatNumber = number => {\n  if (number === null || number === undefined) return '0';\n  return new Intl.NumberFormat('en-ZA').format(number);\n};\n\n/**\r\n * Truncate text to a specified length and add ellipsis\r\n * @param {string} text - The text to truncate\r\n * @param {number} maxLength - Maximum length before truncation\r\n * @returns {string} Truncated text with ellipsis if needed\r\n */\nexport const truncateText = (text, maxLength = 50) => {\n  if (!text) return '';\n  if (text.length <= maxLength) return text;\n  return `${text.substring(0, maxLength)}...`;\n};\n\n/**\r\n * Format bytes to a human-readable string\r\n * @param {number} bytes - The number of bytes\r\n * @param {number} decimals - Number of decimal places\r\n * @returns {string} Formatted file size string\r\n */\nexport const formatFileSize = (bytes, decimals = 2) => {\n  if (bytes === 0) return '0 Bytes';\n  const k = 1024;\n  const dm = decimals < 0 ? 0 : decimals;\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\n};","map":{"version":3,"names":["formatCurrency","amount","currency","undefined","Intl","NumberFormat","style","minimumFractionDigits","maximumFractionDigits","format","formatDate","dateString","date","Date","DateTimeFormat","year","month","day","hour","minute","formatNumber","number","truncateText","text","maxLength","length","substring","formatFileSize","bytes","decimals","k","dm","sizes","i","Math","floor","log","parseFloat","pow","toFixed"],"sources":["C:/Users/Wipro/CascadeProjects/debtMan/frontend/src/utils/format.js"],"sourcesContent":["/**\r\n * Format a number as currency\r\n * @param {number} amount - The amount to format\r\n * @param {string} currency - The currency code (default: 'ZAR')\r\n * @returns {string} Formatted currency string\r\n */\r\nexport const formatCurrency = (amount, currency = 'ZAR') => {\r\n  if (amount === null || amount === undefined) return 'N/A';\r\n  \r\n  return new Intl.NumberFormat('en-ZA', {\r\n    style: 'currency',\r\n    currency: currency,\r\n    minimumFractionDigits: 2,\r\n    maximumFractionDigits: 2\r\n  }).format(amount);\r\n};\r\n\r\n/**\r\n * Format a date string to a more readable format\r\n * @param {string} dateString - The date string to format\r\n * @returns {string} Formatted date string\r\n */\r\nexport const formatDate = (dateString) => {\r\n  if (!dateString) return 'N/A';\r\n  \r\n  const date = new Date(dateString);\r\n  return new Intl.DateTimeFormat('en-ZA', {\r\n    year: 'numeric',\r\n    month: 'short',\r\n    day: 'numeric',\r\n    hour: '2-digit',\r\n    minute: '2-digit'\r\n  }).format(date);\r\n};\r\n\r\n/**\r\n * Format a number with commas as thousand separators\r\n * @param {number} number - The number to format\r\n * @returns {string} Formatted number string\r\n */\r\nexport const formatNumber = (number) => {\r\n  if (number === null || number === undefined) return '0';\r\n  return new Intl.NumberFormat('en-ZA').format(number);\r\n};\r\n\r\n/**\r\n * Truncate text to a specified length and add ellipsis\r\n * @param {string} text - The text to truncate\r\n * @param {number} maxLength - Maximum length before truncation\r\n * @returns {string} Truncated text with ellipsis if needed\r\n */\r\nexport const truncateText = (text, maxLength = 50) => {\r\n  if (!text) return '';\r\n  if (text.length <= maxLength) return text;\r\n  return `${text.substring(0, maxLength)}...`;\r\n};\r\n\r\n/**\r\n * Format bytes to a human-readable string\r\n * @param {number} bytes - The number of bytes\r\n * @param {number} decimals - Number of decimal places\r\n * @returns {string} Formatted file size string\r\n */\r\nexport const formatFileSize = (bytes, decimals = 2) => {\r\n  if (bytes === 0) return '0 Bytes';\r\n  \r\n  const k = 1024;\r\n  const dm = decimals < 0 ? 0 : decimals;\r\n  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];\r\n  \r\n  const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n  return `${parseFloat((bytes / Math.pow(k, i)).toFixed(dm))} ${sizes[i]}`;\r\n};\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMA,cAAc,GAAGA,CAACC,MAAM,EAAEC,QAAQ,GAAG,KAAK,KAAK;EAC1D,IAAID,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKE,SAAS,EAAE,OAAO,KAAK;EAEzD,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,EAAE;IACpCC,KAAK,EAAE,UAAU;IACjBJ,QAAQ,EAAEA,QAAQ;IAClBK,qBAAqB,EAAE,CAAC;IACxBC,qBAAqB,EAAE;EACzB,CAAC,CAAC,CAACC,MAAM,CAACR,MAAM,CAAC;AACnB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMS,UAAU,GAAIC,UAAU,IAAK;EACxC,IAAI,CAACA,UAAU,EAAE,OAAO,KAAK;EAE7B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAO,IAAIP,IAAI,CAACU,cAAc,CAAC,OAAO,EAAE;IACtCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE,SAAS;IACdC,IAAI,EAAE,SAAS;IACfC,MAAM,EAAE;EACV,CAAC,CAAC,CAACV,MAAM,CAACG,IAAI,CAAC;AACjB,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMQ,YAAY,GAAIC,MAAM,IAAK;EACtC,IAAIA,MAAM,KAAK,IAAI,IAAIA,MAAM,KAAKlB,SAAS,EAAE,OAAO,GAAG;EACvD,OAAO,IAAIC,IAAI,CAACC,YAAY,CAAC,OAAO,CAAC,CAACI,MAAM,CAACY,MAAM,CAAC;AACtD,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAGA,CAACC,IAAI,EAAEC,SAAS,GAAG,EAAE,KAAK;EACpD,IAAI,CAACD,IAAI,EAAE,OAAO,EAAE;EACpB,IAAIA,IAAI,CAACE,MAAM,IAAID,SAAS,EAAE,OAAOD,IAAI;EACzC,OAAO,GAAGA,IAAI,CAACG,SAAS,CAAC,CAAC,EAAEF,SAAS,CAAC,KAAK;AAC7C,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,MAAMG,cAAc,GAAGA,CAACC,KAAK,EAAEC,QAAQ,GAAG,CAAC,KAAK;EACrD,IAAID,KAAK,KAAK,CAAC,EAAE,OAAO,SAAS;EAEjC,MAAME,CAAC,GAAG,IAAI;EACd,MAAMC,EAAE,GAAGF,QAAQ,GAAG,CAAC,GAAG,CAAC,GAAGA,QAAQ;EACtC,MAAMG,KAAK,GAAG,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC;EAEvE,MAAMC,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,GAAG,CAACR,KAAK,CAAC,GAAGM,IAAI,CAACE,GAAG,CAACN,CAAC,CAAC,CAAC;EACnD,OAAO,GAAGO,UAAU,CAAC,CAACT,KAAK,GAAGM,IAAI,CAACI,GAAG,CAACR,CAAC,EAAEG,CAAC,CAAC,EAAEM,OAAO,CAACR,EAAE,CAAC,CAAC,IAAIC,KAAK,CAACC,CAAC,CAAC,EAAE;AAC1E,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}